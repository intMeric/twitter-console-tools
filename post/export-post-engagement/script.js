// Twitter Profile Auto-Scroll Script
// Execute in browser console (F12) on any Twitter profile page

// Display available options
console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üê¶ TWITTER AUTO-SCROLL üê¶                 ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                              ‚ïë
‚ïë  üìã Available Methods:                                       ‚ïë
‚ïë                                                              ‚ïë
‚ïë  1Ô∏è‚É£  normalScroll()     - Safe speed (1.5s intervals)       ‚ïë
‚ïë      ‚îú‚îÄ Recommended for most users                          ‚ïë
‚ïë      ‚îú‚îÄ Less likely to trigger rate limits                  ‚ïë
‚ïë      ‚îî‚îÄ Good for long timelines                             ‚ïë
‚ïë                                                              ‚ïë
‚ïë  2Ô∏è‚É£  fastScroll()       - Fast speed (0.5s intervals)       ‚ïë
‚ïë      ‚îú‚îÄ For when you're in a hurry                          ‚ïë
‚ïë      ‚îú‚îÄ May trigger Twitter rate limits                     ‚ïë
‚ïë      ‚îî‚îÄ Best for shorter timelines                          ‚ïë
‚ïë                                                              ‚ïë
‚ïë  3Ô∏è‚É£  ultraFastScroll()  - Maximum speed (0.2s intervals)    ‚ïë
‚ïë      ‚îú‚îÄ Experimental - use with caution                     ‚ïë
‚ïë      ‚îú‚îÄ High risk of rate limiting                          ‚ïë
‚ïë      ‚îî‚îÄ Only for small profiles                             ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üõë Emergency Stop:     stopScroll()                        ‚ïë
‚ïë                                                              ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üí° Usage: Type the method name in console and press Enter  ‚ïë
‚ïë     Example: normalScroll()                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

// Method 1: Normal speed scrolling
function normalScroll() {
    let scrollCount = 0;
    let lastHeight = document.body.scrollHeight;
    let noNewContentCount = 0;
    
    console.log("üöÄ Starting normal speed auto-scroll...");
    
    const scrollInterval = setInterval(() => {
        // Scroll to bottom
        window.scrollTo(0, document.body.scrollHeight);
        scrollCount++;
        
        console.log(`üìú Scroll #${scrollCount}`);
        
        // Wait for content to load
        setTimeout(() => {
            const newHeight = document.body.scrollHeight;
            
            // Check if we've reached the end
            if (newHeight === lastHeight) {
                noNewContentCount++;
                console.log(`‚è≥ No new content detected (${noNewContentCount}/3)`);
                
                // Stop if no new content for 3 consecutive checks
                if (noNewContentCount >= 3) {
                    clearInterval(scrollInterval);
                    console.log("‚úÖ End of timeline reached!");
                    console.log(`üìä Total scrolls: ${scrollCount}`);
                    return;
                }
            } else {
                // New content detected, reset counter
                noNewContentCount = 0;
                lastHeight = newHeight;
                console.log("üîÑ New content loaded, continuing...");
            }
        }, 1000); // Wait 1 second for loading
        
    }, 1500); // Scroll every 1.5 seconds
    
    // Store interval for emergency stop
    window.currentScrollInterval = scrollInterval;
}

// Method 2: Fast speed scrolling
function fastScroll() {
    let scrollCount = 0;
    let lastHeight = document.body.scrollHeight;
    let noNewContentCount = 0;
    
    console.log("üöÄ Starting FAST auto-scroll...");
    console.log("‚ö†Ô∏è  Warning: May trigger Twitter rate limits");
    
    const scrollInterval = setInterval(() => {
        window.scrollTo(0, document.body.scrollHeight);
        scrollCount++;
        
        // Log every 10 scrolls to reduce console spam
        if (scrollCount % 10 === 0) {
            console.log(`üìú Scroll #${scrollCount}`);
        }
        
        setTimeout(() => {
            const newHeight = document.body.scrollHeight;
            
            if (newHeight === lastHeight) {
                noNewContentCount++;
                
                // Require 5 checks for fast mode (more scrolls = more checks needed)
                if (noNewContentCount >= 5) {
                    clearInterval(scrollInterval);
                    console.log("‚úÖ End of timeline reached!");
                    console.log(`üìä Total scrolls: ${scrollCount}`);
                    return;
                }
            } else {
                noNewContentCount = 0;
                lastHeight = newHeight;
            }
        }, 300); // Shorter wait time
        
    }, 500); // Scroll every 0.5 seconds
    
    window.currentScrollInterval = scrollInterval;
}

// Method 3: Ultra-fast scrolling (experimental)
function ultraFastScroll() {
    let scrollCount = 0;
    let lastHeight = document.body.scrollHeight;
    let noNewContentCount = 0;
    
    console.log("üöÄ Starting ULTRA-FAST auto-scroll...");
    console.log("‚ö†Ô∏è  WARNING: High risk of rate limiting!");
    console.log("üí° Recommended only for small profiles");
    
    const scrollInterval = setInterval(() => {
        window.scrollTo(0, document.body.scrollHeight);
        scrollCount++;
        
        // Log every 20 scrolls to reduce console spam
        if (scrollCount % 20 === 0) {
            console.log(`üìú Scroll #${scrollCount}`);
        }
        
        setTimeout(() => {
            const newHeight = document.body.scrollHeight;
            
            if (newHeight === lastHeight) {
                noNewContentCount++;
                
                if (noNewContentCount >= 8) {
                    clearInterval(scrollInterval);
                    console.log("‚úÖ End of timeline reached!");
                    console.log(`üìä Total scrolls: ${scrollCount}`);
                    return;
                }
            } else {
                noNewContentCount = 0;
                lastHeight = newHeight;
            }
        }, 100); // Very short wait time
        
    }, 200); // Scroll every 0.2 seconds
    
    window.currentScrollInterval = scrollInterval;
}

// Emergency stop function
function stopScroll() {
    if (window.currentScrollInterval) {
        clearInterval(window.currentScrollInterval);
        console.log("üõë Scrolling stopped manually!");
        window.currentScrollInterval = null;
    } else {
        console.log("‚ÑπÔ∏è  No active scrolling to stop");
    }
}

// Show instructions again
function scrollShowHelp() {
    console.log(`
üìã Available Commands:
‚Ä¢ normalScroll()     - Start normal speed scrolling
‚Ä¢ fastScroll()       - Start fast speed scrolling  
‚Ä¢ ultraFastScroll()  - Start ultra-fast scrolling
‚Ä¢ stopScroll()       - Emergency stop
‚Ä¢ showHelp()         - Show this help again
    `);
}

console.log("‚úÖ Script loaded! Choose your scrolling method above.");
console.log("üí° Type showHelp() to see commands again.");